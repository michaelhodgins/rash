// Generated by CoffeeScript 1.8.0

/*
Represents the root of the CSS AST.
 */
var Function, Import, Literal, MediaQuery, ParameterList, Property, Rule, StyleSheet, ValueGroup;

StyleSheet = (function() {
  function StyleSheet(rules, charset) {
    this.rules = rules;
    this.charset = charset != null ? charset : null;
  }

  StyleSheet.prototype.toCSS = function() {
    var css;
    css = this.rules.map(function(rule) {
      return rule.toCSS();
    }).join("\n");
    if (this.charset) {
      css = ("@charset " + this.charset + ";") + css;
    }
    return css;
  };

  StyleSheet.prototype.rash = function() {
    var mediaQuery, numRules, position, rule, subsequentMediaQuery, subsequentPosition, subsequentRule;
    numRules = this.rules.length;
    position = 0;
    while (position < numRules) {
      mediaQuery = this.rules[position];
      if (mediaQuery instanceof MediaQuery) {
        subsequentPosition = position + 1;
        while (subsequentPosition < numRules) {
          subsequentMediaQuery = this.rules[subsequentPosition];
          if (subsequentMediaQuery instanceof MediaQuery && subsequentMediaQuery.query === mediaQuery.query) {
            subsequentMediaQuery.merge(mediaQuery);
            this.rules.splice(position, position + 1);
            numRules--;
            break;
          }
          subsequentPosition++;
        }
      }
      position++;
    }
    position = 0;
    while (position < numRules) {
      rule = this.rules[position];
      if (rule instanceof Rule) {
        subsequentPosition = position + 1;
        while (subsequentPosition < numRules) {
          subsequentRule = this.rules[subsequentPosition];
          if (subsequentRule instanceof Rule && subsequentRule.selector === rule.selector) {
            subsequentRule.merge(rule);
            this.rules.splice(position, position + 1);
            numRules--;
            break;
          }
          subsequentPosition++;
        }
      }
      position++;
    }
    return this;
  };

  return StyleSheet;

})();


/*
Represents a media query section.
 */

MediaQuery = (function() {
  function MediaQuery(query, rules) {
    this.query = query;
    this.rules = rules;
  }

  MediaQuery.prototype.toCSS = function() {
    var rules;
    rules = this.rules.map(function(rule) {
      return rule.toCSS();
    }).join("\n");
    return "" + this.query + " {" + rules + "}";
  };

  MediaQuery.prototype.merge = function(mediaQuery) {
    var numRules, position, rule, subsequentPosition, subsequentRule, _i, _len, _ref;
    _ref = mediaQuery.rules.reverse();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rule = _ref[_i];
      this.rules.unshift(rule);
    }
    numRules = this.rules.length;
    position = 0;
    while (position < numRules) {
      rule = this.rules[position];
      subsequentPosition = position + 1;
      while (subsequentPosition < numRules) {
        subsequentRule = this.rules[subsequentPosition];
        if (subsequentRule.selector === rule.selector) {
          subsequentRule.merge(rule);
          this.rules.splice(position, position + 1);
          numRules--;
          break;
        }
        subsequentPosition++;
      }
      position++;
    }
    return this;
  };

  return MediaQuery;

})();


/*
Represents an import statement.
 */

Import = (function() {
  function Import(imports) {
    this.imports = imports;
  }

  Import.prototype.toCSS = function() {
    return "" + this.imports + ";";
  };

  return Import;

})();


/*
Represents a @namespace declaration.
 */

Namespace = (function() {
  function Namespace(namespace) {
    this.namespace = namespace;
  }

  Namespace.prototype.toCSS = function() {
    return "" + this.namespace + ";";
  };

  return Namespace;

})();


Represents a single CSS rule, consisting on a selector and one or more properties.
 */

Rule = (function() {
  function Rule(selector, properties) {
    this.selector = selector;
    this.properties = properties;
  }

  Rule.prototype.toCSS = function() {
    var properties;
    properties = this.properties.map(function(property) {
      return property.toCSS();
    }).join(";");
    return "" + this.selector + " {" + properties + "}";
  };

  Rule.prototype.merge = function(rule) {
    var property, _i, _len, _ref, _results;
    _ref = rule.properties;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      if (!this.hasProperty(property)) {
        _results.push(this.properties.unshift(property));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };


  /*
  Returns true if the given property already has a value in this rule.
   */

  Rule.prototype.hasProperty = function(property) {
    var existingProperty, _i, _len, _ref;
    _ref = this.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      existingProperty = _ref[_i];
      if (existingProperty.name === property.name) {
        return true;
      }
    }
    return false;
  };

  return Rule;

})();


/*
Represents a single CSS property, consisting of a style name, and one or more values.
 */

Property = (function() {
  function Property(name, values, important) {
    this.name = name;
    this.values = values;
    this.important = important != null ? important : false;
  }

  Property.prototype.toCSS = function() {
    var values;
    if (this.values instanceof Array) {
      values = this.values.map(function(value) {
        return value.toCSS();
      }).join(',');
    } else {
      values = this.values.toCSS();
    }
    return "" + this.name + ": " + values + (this.important ? ' !important' : '');
  };

  return Property;

})();


/*
Represents a list of values as parameters to a function.
 */

ParameterList = (function() {
  function ParameterList(values) {
    this.values = values;
  }

  ParameterList.prototype.toCSS = function() {
    return this.values.map(function(value) {
      return value.toCSS();
    }).join(',');
  };

  return ParameterList;

})();


/*
Represents a comma separated list of values.
 */

ValueGroup = (function() {
  function ValueGroup(values) {
    this.values = values;
  }

  ValueGroup.prototype.toCSS = function() {
    return this.values.map(function(value) {
      return value.toCSS();
    }).join(' ');
  };

  return ValueGroup;

})();


/*
Represents a css function with a comma separated list of arguments.
 */

Function = (function() {
  function Function(name, values) {
    this.name = name;
    this.values = values;
  }

  Function.prototype.toCSS = function() {
    return "" + this.name + "(" + (this.values.toCSS()) + ")";
  };

  return Function;

})();


/*
Represents a literal value.
 */

Literal = (function() {
  function Literal(value) {
    this.value = value;
  }

  Literal.prototype.toCSS = function() {
    return this.value;
  };

  return Literal;

})();

exports.StyleSheet = StyleSheet;

exports.MediaQuery = MediaQuery;

exports.Import = Import;

exports.Rule = Rule;

exports.Property = Property;

exports.Function = Function;

exports.Literal = Literal;

exports.ParameterList = ParameterList;

exports.ValueGroup = ValueGroup;
