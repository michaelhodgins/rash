/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,21],$V7=[1,22],$V8=[1,24],$V9=[8,17,21,22,24,25,27,31,32],$Va=[18,29],$Vb=[18,29,31,32],$Vc=[6,20],$Vd=[2,27],$Ve=[1,41],$Vf=[20,31,32],$Vg=[1,50],$Vh=[1,60],$Vi=[1,61],$Vj=[1,62],$Vk=[1,63],$Vl=[1,64],$Vm=[6,20,29,36],$Vn=[6,20,29,31,36,43,44,45,46,50],$Vo=[29,48],$Vp=[1,74],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[2,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"CHARSET":4,"string":5,"SEMICOLON":6,"sections":7,"EOF":8,"section":9,"media_query":10,"namespace":11,"page":12,"font_face":13,"ms_viewport":14,"import":15,"rule":16,"MEDIA_QUERY":17,"LBRACE":18,"rules":19,"RBRACE":20,"NAMESPACE":21,"PAGE":22,"properties":23,"FONTFACE":24,"MS_VIEWPORT":25,"selectorList":26,"IMPORT":27,"selectors":28,"COMMA":29,"selector":30,"IDENTIFIER":31,"SELECTOR":32,"property":33,"COLON":34,"values":35,"IMPORTANT":36,"valueGroup":37,"value":38,"parameterList":39,"parameter":40,"EQUAL":41,"paramValue":42,"COLOR":43,"NUMBER":44,"DIMENSION":45,"NAME":46,"LPAREN":47,"RPAREN":48,"DIVISION":49,"STRING":50,"$accept":0,"$end":1},
terminals_: {2:"error",4:"CHARSET",6:"SEMICOLON",8:"EOF",17:"MEDIA_QUERY",18:"LBRACE",20:"RBRACE",21:"NAMESPACE",22:"PAGE",24:"FONTFACE",25:"MS_VIEWPORT",27:"IMPORT",29:"COMMA",31:"IDENTIFIER",32:"SELECTOR",34:"COLON",36:"IMPORTANT",41:"EQUAL",43:"COLOR",44:"NUMBER",45:"DIMENSION",46:"NAME",47:"LPAREN",48:"RPAREN",49:"DIVISION",50:"STRING"},
productions_: [0,[3,5],[3,2],[7,1],[7,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[10,4],[11,2],[12,4],[13,4],[14,4],[19,1],[19,2],[16,4],[15,2],[26,1],[26,3],[28,1],[28,2],[30,1],[30,1],[23,0],[23,1],[23,3],[23,2],[33,3],[33,4],[35,1],[35,3],[37,1],[37,2],[39,0],[39,1],[39,3],[40,3],[40,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[38,4],[38,1],[38,1],[38,3],[38,1],[38,1],[38,1],[38,1],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new ast.StyleSheet($$[$0-1], $$[$0-3]) 
break;
case 2:
 return new ast.StyleSheet($$[$0-1]) 
break;
case 3: case 17: case 28: case 35: case 38:
 this.$ = [ $$[$0] ] 
break;
case 4: case 18: case 36:
 this.$ = $$[$0-1].concat($$[$0]) 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 21: case 42: case 43: case 44: case 45: case 46: case 47:
 this.$ = $$[$0] 
break;
case 12:
 this.$ = new ast.MediaQuery($$[$0-3].trim(), $$[$0-1]) 
break;
case 13:
 this.$ = new ast.Namespace($$[$0-1]) 
break;
case 14:
 this.$ = new ast.Page($$[$0-3], $$[$0-1]) 
break;
case 15:
 this.$ = new ast.FontFace($$[$0-1]) 
break;
case 16:
 this.$ = new ast.MsViewport($$[$0-1]) 
break;
case 19:
 this.$ = new ast.Rule($$[$0-3], $$[$0-1]) 
break;
case 20:
 this.$ = new ast.Import($$[$0-1]) 
break;
case 22:
 this.$ = [$$[$0-2], $$[$0]].join(', ') 
break;
case 23:
 this.$ =  $$[$0] 
break;
case 24:
 this.$ = [$$[$0-1], $$[$0]].join(' ') 
break;
case 27: case 37:
 this.$ = [] 
break;
case 29: case 39:
 this.$ = $$[$0-2].concat($$[$0]) 
break;
case 30:
 this.$ = $$[$0-1] 
break;
case 31:
 this.$ = new ast.Property($$[$0-2], $$[$0]) 
break;
case 32:
 this.$ = new ast.Property($$[$0-3], $$[$0-1], true) 
break;
case 33:
 this.$ = [ new ast.ValueGroup($$[$0]) ] 
break;
case 34:
 this.$ = $$[$0-2].concat(new ast.ValueGroup($$[$0])) 
break;
case 40: case 51:
 this.$ = new ast.Literal($$[$0-2] + $$[$0-1] + $$[$0]) 
break;
case 41: case 49: case 50: case 52: case 53: case 54: case 55:
 this.$ = new ast.Literal($$[$0]) 
break;
case 48:
 this.$ = new ast.Function($$[$0-3], new ast.ParameterList($$[$0-1])) 
break;
}
},
table: [{3:1,4:[1,2],7:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:18,27:$V5,28:19,30:20,31:$V6,32:$V7},{1:[3]},{5:23,50:$V8},{8:[1,25],9:26,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:18,27:$V5,28:19,30:20,31:$V6,32:$V7},o($V9,[2,3]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{18:[1,27]},{6:[1,28]},{18:[1,29]},{18:[1,30]},{18:[1,31]},{6:[1,32]},{18:[1,33],29:[1,34]},o($Va,[2,21],{30:35,31:$V6,32:$V7}),o($Vb,[2,23]),o($Vb,[2,25]),o($Vb,[2,26]),{6:[1,36]},o([6,20,29,31,36,43,44,45,46,48,50],[2,56]),{1:[2,2]},o($V9,[2,4]),{16:38,19:37,26:18,28:19,30:20,31:$V6,32:$V7},o($V9,[2,13]),o($Vc,$Vd,{23:39,33:40,31:$Ve}),o($Vc,$Vd,{33:40,23:42,31:$Ve}),o($Vc,$Vd,{33:40,23:43,31:$Ve}),o($V9,[2,20]),o($Vc,$Vd,{33:40,23:44,31:$Ve}),{28:45,30:20,31:$V6,32:$V7},o($Vb,[2,24]),{7:46,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:18,27:$V5,28:19,30:20,31:$V6,32:$V7},{16:48,20:[1,47],26:18,28:19,30:20,31:$V6,32:$V7},o($Vf,[2,17]),{6:$Vg,20:[1,49]},o($Vc,[2,28]),{34:[1,51]},{6:$Vg,20:[1,52]},{6:$Vg,20:[1,53]},{6:$Vg,20:[1,54]},o($Va,[2,22],{30:35,31:$V6,32:$V7}),{8:[1,55],9:26,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:18,27:$V5,28:19,30:20,31:$V6,32:$V7},o($V9,[2,12]),o($Vf,[2,18]),o($V9,[2,14]),o($Vc,[2,30],{33:56,31:$Ve}),{5:65,31:$Vh,35:57,37:58,38:59,43:$Vi,44:$Vj,45:$Vk,46:$Vl,50:$V8},o($V9,[2,15]),o($V9,[2,16]),o([8,17,20,21,22,24,25,27,31,32],[2,19]),{1:[2,1]},o($Vc,[2,29]),o($Vc,[2,31],{29:[1,67],36:[1,66]}),o($Vm,[2,33],{5:65,38:68,31:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,50:$V8}),o($Vn,[2,35]),o($Vn,[2,49],{47:[1,69]}),o($Vn,[2,50]),o($Vn,[2,52],{49:[1,70]}),o($Vn,[2,53]),o($Vn,[2,54]),o($Vn,[2,55]),o($Vc,[2,32]),{5:65,31:$Vh,37:71,38:59,43:$Vi,44:$Vj,45:$Vk,46:$Vl,50:$V8},o($Vn,[2,36]),o($Vo,[2,37],{39:72,40:73,42:75,5:80,31:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,50:$V8}),{44:[1,81]},o($Vm,[2,34],{5:65,38:68,31:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,50:$V8}),{29:[1,83],48:[1,82]},o($Vo,[2,38]),o($Vo,$Vu,{41:[1,84]}),o($Vo,[2,41]),o($Vo,[2,43]),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,46]),o($Vo,[2,47]),o($Vn,[2,51]),o($Vn,[2,48]),{5:80,31:$Vp,40:85,42:75,43:$Vq,44:$Vr,45:$Vs,46:$Vt,50:$V8},{5:80,31:[1,87],42:86,43:$Vq,44:$Vr,45:$Vs,46:$Vt,50:$V8},o($Vo,[2,39]),o($Vo,[2,40]),o($Vo,$Vu)],
defaultActions: {25:[2,2],55:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var ast = require('./ast')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:;							// ignore multiline comments
break;
case 1:;                       	// ignore spaces, line breaks
break;
case 2:return 45;     	// 10px, 1em, 50%, .67em, .15s
break;
case 3:return 44;        	// 0, .1
break;
case 4:return 43;         	// #fff, #f0f0f0
break;
case 5:return 50;        	// "blah", 'blah'
break;
case 6:return 17;       //@media screen and (min-width: 400px) and (max-width: 700px)
break;
case 7:return 4;           //@charset
break;
case 8:return 27;            //@import 'custom.css';, @import "common.css" screen, projection;
break;
case 9:return 21;         //@namespace url(http://www.w3.org/1999/xhtml);, @namespace svg url(http://www.w3.org/2000/svg);
break;
case 10:return 22;              //@page :first, @page rotate
break;
case 11:return 24;          //@font-face
break;
case 12:return 25;       //@-ms-viewport
break;
case 13:return 32;      	// .class, #id
break;
case 14:return 32;      	// div.class, body#id
break;
case 15:return 32;      	// div[rel=external].class
break;
case 16:return 32;      	// div[rel=external]
break;
case 17:return 32;      	// div[rel=external]
break;
case 18:return 32;      	// >
break;
case 19:return 32;      	// ~
break;
case 20:return 32;      	// +
break;
case 21:return 31;    	// body, font-size
break;
case 22:return 36;
break;
case 23:return 47;            // (
break;
case 24:return 48;            // )
break;
case 25:return 29;             // ,
break;
case 26:return 6;         // ;
break;
case 27:return 34;             // :
break;
case 28:return 18;            // {
break;
case 29:return 20;            // }
break;
case 30:return 41;             // =
break;
case 31:return 49;          // /
break;
case 32:return yy_.yytext;          	// {, }, +, :, ;
break;
case 33:return 8;
break;
}
},
rules: [/^(?:\/\*[\s\S]*?\*\/)/,/^(?:\s+)/,/^(?:((([0-9])+(\.([0-9])+)?)|(\.([0-9])+))(px|em|%|s))/,/^(?:(([0-9])+(\.([0-9])+)?)|(\.([0-9])+))/,/^(?:#[0-9A-Fa-f]{3,6})/,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*')))/,/^(?:(@media([^@{]+)))/,/^(?:(@charset\b))/,/^(?:(@import[^@{;]+))/,/^(?:(@namespace[^@{;]+))/,/^(?:(@page[\W]+[\:]?[a-z]+))/,/^(?:(@font-face\b))/,/^(?:(@-ms-viewport\b))/,/^(?:(((\.|#|::|:)([-a-zA-Z][-\w\(\)\[\]]*))+))/,/^(?:([-a-zA-Z\*][-\w\|]*)(((\.|#|::|:)([-a-zA-Z][-\w\(\)\[\]]*))+))/,/^(?:([-a-zA-Z\*][-\w\|]*)(([\[]([-a-zA-Z\*][-\w\|]*)([\*\^\$~\|]?[=]?(([-a-zA-Z\*][-\w\|]*)|(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*'))))[\]])+)(((\.|#|::|:)([-a-zA-Z][-\w\(\)\[\]]*))+))/,/^(?:([-a-zA-Z\*][-\w\|]*)(([\[]([-a-zA-Z\*][-\w\|]*)([\*\^\$~\|]?[=]?(([-a-zA-Z\*][-\w\|]*)|(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*'))))[\]])+))/,/^(?:(([\[]([-a-zA-Z\*][-\w\|]*)([\*\^\$~\|]?[=]?(([-a-zA-Z\*][-\w\|]*)|(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*'))))[\]])+))/,/^(?:(>))/,/^(?:(~))/,/^(?:(\+))/,/^(?:([-a-zA-Z\*][-\w\|]*))/,/^(?:(![iI][mM][pP][oO][rR][tT][aA][nN][tT]))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(,))/,/^(?:(;))/,/^(?:(:))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(=))/,/^(?:(\/))/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}