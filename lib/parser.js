/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,19],$V6=[1,20],$V7=[1,22],$V8=[8,16,20,21,23,25,29,30],$V9=[17,27],$Va=[17,27,29,30],$Vb=[6,19],$Vc=[2,25],$Vd=[1,38],$Ve=[19,29,30],$Vf=[1,46],$Vg=[1,55],$Vh=[1,56],$Vi=[1,57],$Vj=[1,58],$Vk=[1,59],$Vl=[6,19,27,34],$Vm=[6,19,27,29,34,41,42,43,44,48],$Vn=[27,46],$Vo=[1,69],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[2,40];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"CHARSET":4,"string":5,"SEMICOLON":6,"sections":7,"EOF":8,"section":9,"media_query":10,"namespace":11,"page":12,"font_face":13,"import":14,"rule":15,"MEDIA_QUERY":16,"LBRACE":17,"rules":18,"RBRACE":19,"NAMESPACE":20,"PAGE":21,"properties":22,"FONTFACE":23,"selectorList":24,"IMPORT":25,"selectors":26,"COMMA":27,"selector":28,"IDENTIFIER":29,"SELECTOR":30,"property":31,"COLON":32,"values":33,"IMPORTANT":34,"valueGroup":35,"value":36,"parameterList":37,"parameter":38,"EQUAL":39,"paramValue":40,"COLOR":41,"NUMBER":42,"DIMENSION":43,"NAME":44,"LPAREN":45,"RPAREN":46,"DIVISION":47,"STRING":48,"$accept":0,"$end":1},
terminals_: {2:"error",4:"CHARSET",6:"SEMICOLON",8:"EOF",16:"MEDIA_QUERY",17:"LBRACE",19:"RBRACE",20:"NAMESPACE",21:"PAGE",23:"FONTFACE",25:"IMPORT",27:"COMMA",29:"IDENTIFIER",30:"SELECTOR",32:"COLON",34:"IMPORTANT",39:"EQUAL",41:"COLOR",42:"NUMBER",43:"DIMENSION",44:"NAME",45:"LPAREN",46:"RPAREN",47:"DIVISION",48:"STRING"},
productions_: [0,[3,5],[3,2],[7,1],[7,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[10,4],[11,2],[12,4],[13,4],[18,1],[18,2],[15,4],[14,2],[24,1],[24,3],[26,1],[26,2],[28,1],[28,1],[22,0],[22,1],[22,3],[22,2],[31,3],[31,4],[33,1],[33,3],[35,1],[35,2],[37,0],[37,1],[37,3],[38,3],[38,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[36,4],[36,1],[36,1],[36,3],[36,1],[36,1],[36,1],[36,1],[5,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new ast.StyleSheet($$[$0-1], $$[$0-3]) 
break;
case 2:
 return new ast.StyleSheet($$[$0-1]) 
break;
case 3: case 15: case 26: case 33: case 36:
 this.$ = [ $$[$0] ] 
break;
case 4: case 16: case 34:
 this.$ = $$[$0-1].concat($$[$0]) 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 19: case 40: case 41: case 42: case 43: case 44: case 45:
 this.$ = $$[$0] 
break;
case 11:
 this.$ = new ast.MediaQuery($$[$0-3].trim(), $$[$0-1]) 
break;
case 12:
 this.$ = new ast.Namespace($$[$0-1]) 
break;
case 13:
 this.$ = new ast.Page($$[$0-3], $$[$0-1]) 
break;
case 14:
 this.$ = new ast.FontFace($$[$0-1]) 
break;
case 17:
 this.$ = new ast.Rule($$[$0-3], $$[$0-1]) 
break;
case 18:
 this.$ = new ast.Import($$[$0-1]) 
break;
case 20:
 this.$ = [$$[$0-2], $$[$0]].join(', ') 
break;
case 21:
 this.$ =  $$[$0] 
break;
case 22:
 this.$ = [$$[$0-1], $$[$0]].join(' ') 
break;
case 25: case 35:
 this.$ = [] 
break;
case 27: case 37:
 this.$ = $$[$0-2].concat($$[$0]) 
break;
case 28:
 this.$ = $$[$0-1] 
break;
case 29:
 this.$ = new ast.Property($$[$0-2], $$[$0]) 
break;
case 30:
 this.$ = new ast.Property($$[$0-3], $$[$0-1], true) 
break;
case 31:
 this.$ = [ new ast.ValueGroup($$[$0]) ] 
break;
case 32:
 this.$ = $$[$0-2].concat(new ast.ValueGroup($$[$0])) 
break;
case 38: case 49:
 this.$ = new ast.Literal($$[$0-2] + $$[$0-1] + $$[$0]) 
break;
case 39: case 47: case 48: case 50: case 51: case 52: case 53:
 this.$ = new ast.Literal($$[$0]) 
break;
case 46:
 this.$ = new ast.Function($$[$0-3], new ast.ParameterList($$[$0-1])) 
break;
}
},
table: [{3:1,4:[1,2],7:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:$V0,20:$V1,21:$V2,23:$V3,24:16,25:$V4,26:17,28:18,29:$V5,30:$V6},{1:[3]},{5:21,48:$V7},{8:[1,23],9:24,10:5,11:6,12:7,13:8,14:9,15:10,16:$V0,20:$V1,21:$V2,23:$V3,24:16,25:$V4,26:17,28:18,29:$V5,30:$V6},o($V8,[2,3]),o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{17:[1,25]},{6:[1,26]},{17:[1,27]},{17:[1,28]},{6:[1,29]},{17:[1,30],27:[1,31]},o($V9,[2,19],{28:32,29:$V5,30:$V6}),o($Va,[2,21]),o($Va,[2,23]),o($Va,[2,24]),{6:[1,33]},o([6,19,27,29,34,41,42,43,44,46,48],[2,54]),{1:[2,2]},o($V8,[2,4]),{15:35,18:34,24:16,26:17,28:18,29:$V5,30:$V6},o($V8,[2,12]),o($Vb,$Vc,{22:36,31:37,29:$Vd}),o($Vb,$Vc,{31:37,22:39,29:$Vd}),o($V8,[2,18]),o($Vb,$Vc,{31:37,22:40,29:$Vd}),{26:41,28:18,29:$V5,30:$V6},o($Va,[2,22]),{7:42,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:$V0,20:$V1,21:$V2,23:$V3,24:16,25:$V4,26:17,28:18,29:$V5,30:$V6},{15:44,19:[1,43],24:16,26:17,28:18,29:$V5,30:$V6},o($Ve,[2,15]),{6:$Vf,19:[1,45]},o($Vb,[2,26]),{32:[1,47]},{6:$Vf,19:[1,48]},{6:$Vf,19:[1,49]},o($V9,[2,20],{28:32,29:$V5,30:$V6}),{8:[1,50],9:24,10:5,11:6,12:7,13:8,14:9,15:10,16:$V0,20:$V1,21:$V2,23:$V3,24:16,25:$V4,26:17,28:18,29:$V5,30:$V6},o($V8,[2,11]),o($Ve,[2,16]),o($V8,[2,13]),o($Vb,[2,28],{31:51,29:$Vd}),{5:60,29:$Vg,33:52,35:53,36:54,41:$Vh,42:$Vi,43:$Vj,44:$Vk,48:$V7},o($V8,[2,14]),o([8,16,19,20,21,23,25,29,30],[2,17]),{1:[2,1]},o($Vb,[2,27]),o($Vb,[2,29],{27:[1,62],34:[1,61]}),o($Vl,[2,31],{5:60,36:63,29:$Vg,41:$Vh,42:$Vi,43:$Vj,44:$Vk,48:$V7}),o($Vm,[2,33]),o($Vm,[2,47],{45:[1,64]}),o($Vm,[2,48]),o($Vm,[2,50],{47:[1,65]}),o($Vm,[2,51]),o($Vm,[2,52]),o($Vm,[2,53]),o($Vb,[2,30]),{5:60,29:$Vg,35:66,36:54,41:$Vh,42:$Vi,43:$Vj,44:$Vk,48:$V7},o($Vm,[2,34]),o($Vn,[2,35],{37:67,38:68,40:70,5:75,29:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,48:$V7}),{42:[1,76]},o($Vl,[2,32],{5:60,36:63,29:$Vg,41:$Vh,42:$Vi,43:$Vj,44:$Vk,48:$V7}),{27:[1,78],46:[1,77]},o($Vn,[2,36]),o($Vn,$Vt,{39:[1,79]}),o($Vn,[2,39]),o($Vn,[2,41]),o($Vn,[2,42]),o($Vn,[2,43]),o($Vn,[2,44]),o($Vn,[2,45]),o($Vm,[2,49]),o($Vm,[2,46]),{5:75,29:$Vo,38:80,40:70,41:$Vp,42:$Vq,43:$Vr,44:$Vs,48:$V7},{5:75,29:[1,82],40:81,41:$Vp,42:$Vq,43:$Vr,44:$Vs,48:$V7},o($Vn,[2,37]),o($Vn,[2,38]),o($Vn,$Vt)],
defaultActions: {23:[2,2],50:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var ast = require('./ast')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:;							// ignore multiline comments
break;
case 1:;                       	// ignore spaces, line breaks
break;
case 2:return 43;     	// 10px, 1em, 50%, .67em, .15s
break;
case 3:return 42;        	// 0, .1
break;
case 4:return 41;         	// #fff, #f0f0f0
break;
case 5:return 48;        	// "blah", 'blah'
break;
case 6:return 16;       //@media screen and (min-width: 400px) and (max-width: 700px)
break;
case 7:return 4;           //@charset
break;
case 8:return 25;            //@import 'custom.css';, @import "common.css" screen, projection;
break;
case 9:return 20;         //@namespace url(http://www.w3.org/1999/xhtml);, @namespace svg url(http://www.w3.org/2000/svg);
break;
case 10:return 21;              //@page :first, @page rotate
break;
case 11:return 23;          //@font-face
break;
case 12:return 30;      	// .class, #id
break;
case 13:return 30;      	// div.class, body#id
break;
case 14:return 30;      	// div[rel=external].class
break;
case 15:return 30;      	// div[rel=external]
break;
case 16:return 30;      	// div[rel=external]
break;
case 17:return 30;      	// >
break;
case 18:return 30;      	// ~
break;
case 19:return 30;      	// +
break;
case 20:return 29;    	// body, font-size
break;
case 21:return 34;
break;
case 22:return 45;            // (
break;
case 23:return 46;            // )
break;
case 24:return 27;             // ,
break;
case 25:return 6;         // ;
break;
case 26:return 32;             // :
break;
case 27:return 17;            // {
break;
case 28:return 19;            // }
break;
case 29:return 39;             // =
break;
case 30:return 47;          // /
break;
case 31:return yy_.yytext;          	// {, }, +, :, ;
break;
case 32:return 8;
break;
}
},
rules: [/^(?:\/\*[\s\S]*?\*\/)/,/^(?:\s+)/,/^(?:((([0-9])+(\.([0-9])+)?)|(\.([0-9])+))(px|em|%|s))/,/^(?:(([0-9])+(\.([0-9])+)?)|(\.([0-9])+))/,/^(?:#[0-9A-Fa-f]{3,6})/,/^(?:(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*')))/,/^(?:(@media([^@{]+)))/,/^(?:(@charset\b))/,/^(?:(@import[^@{;]+))/,/^(?:(@namespace[^@{;]+))/,/^(?:(@page[\W]+[\:]?[a-z]+))/,/^(?:(@font-face\b))/,/^(?:(((\.|#|::|:)([-a-zA-Z][-\w\(\)\[\]]*))+))/,/^(?:([-a-zA-Z\*][-\w\|]*)(((\.|#|::|:)([-a-zA-Z][-\w\(\)\[\]]*))+))/,/^(?:([-a-zA-Z\*][-\w\|]*)(([\[]([-a-zA-Z\*][-\w\|]*)([\*\^\$~\|]?[=]?(([-a-zA-Z\*][-\w\|]*)|(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*'))))[\]])+)(((\.|#|::|:)([-a-zA-Z][-\w\(\)\[\]]*))+))/,/^(?:([-a-zA-Z\*][-\w\|]*)(([\[]([-a-zA-Z\*][-\w\|]*)([\*\^\$~\|]?[=]?(([-a-zA-Z\*][-\w\|]*)|(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*'))))[\]])+))/,/^(?:(([\[]([-a-zA-Z\*][-\w\|]*)([\*\^\$~\|]?[=]?(([-a-zA-Z\*][-\w\|]*)|(("([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*")|('([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[\n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*'))))[\]])+))/,/^(?:(>))/,/^(?:(~))/,/^(?:(\+))/,/^(?:([-a-zA-Z\*][-\w\|]*))/,/^(?:(![iI][mM][pP][oO][rR][tT][aA][nN][tT]))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(,))/,/^(?:(;))/,/^(?:(:))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(=))/,/^(?:(\/))/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}